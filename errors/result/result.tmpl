package result
import "github.com/robdavid/genutil-go/tuple"

{{ range $params := seq 2 .max_params }}
{{ $typeConstraints := mapTpl "T{{.}} any" (seq 1 $params) | join ", " -}}
{{ $typeParams := mapTpl "T{{.}}" (seq 1 $params) | join ", " -}}
{{ $parameters := mapTpl "t{{.}} T{{.}}" (seq 1 $params) | join ", " -}}
{{ $arguments := mapTpl "t{{.}}" (seq 1 $params) | join ", " -}}
{{ $tupleFields := list "First" "Second" "Third" "Forth" "Fifth" "Sixth" "Seventh" "Eighth" "Ninth" -}}

// Arity {{$params}} result values
type Result{{$params}}[{{$typeConstraints}}] struct{ Result[tuple.Tuple{{$params}}[{{$typeParams}}]] }

func Value{{$params}}[{{$typeConstraints}}](v tuple.Tuple{{$params}}[{{$typeParams}}]) Result{{$params}}[{{$typeParams}}] {
	return Result{{$params}}[{{$typeParams}}]{Value(v)}
}

func Error{{$params}}[{{$typeConstraints}}](err error) Result{{$params}}[{{$typeParams}}] {
	var zero tuple.Tuple{{$params}}[{{$typeParams}}]
	return Result{{$params}}[{{$typeParams}}]{From(zero, err)}
}

func From{{$params}}[{{$typeConstraints}}]({{$parameters}}, err error) Result{{$params}}[{{$typeParams}}] {
	return Result{{$params}}[{{$typeParams}}]{From(tuple.Of{{$params}}({{$arguments}}), err)}
}

func New{{$params}}[{{$typeConstraints}}]({{$parameters}}, err error) *Result{{$params}}[{{$typeParams}}] {
	r := From{{$params}}({{$arguments}}, err)
	return &r
}

func (r *Result{{$params}}[{{$typeParams}}]) Return() ({{$typeParams}}, error) {
	return {{mapTpl "r.value.{{.}}" (slice $tupleFields 0 $params) | join ", "}}, r.err
}

func (r Result{{$params}}[{{$typeParams}}]) ToRef() *Result{{$params}}[{{$typeParams}}] {
	return &r
}
{{ end }}
