package tuple

{{ $fields := list "First" "Second" "Third" "Forth" "Fifth" "Sixth" "Seventh" "Eighth" "Ninth" -}}
{{ range $i,$n := seq 1 (len $fields) -}}
{{ $p := int (sub $n 1) -}}
{{ $typeConstraints := mapTpl "T{{.}} any" (seq 1 $n) | join ", " -}}
{{ $typeParams := mapTpl "T{{.}}" (seq 1 $n) | join ", " -}}
{{ $prevTypeParams := mapTpl "T{{.}}" (seq 1 $p) | join ", " -}}
{{ $parameters := mapTpl "t{{.}} T{{.}}" (seq 1 $n) | join ", " -}}
{{ $arguments := mapTpl "t{{.}}" (seq 1 $p) | join ", " -}}

// Tuple of {{$n}} fields
type Tuple{{$n}}[{{$typeConstraints}}] struct {
	Tuple{{$p}}{{if gt $n 1}}[{{$prevTypeParams}}]{{end}}
	{{index $fields (sub $n 1)}} T{{$n}}
}

func Of{{$n}}[{{$typeConstraints}}]({{$parameters}}) Tuple{{$n}}[{{$typeParams}}] {
	return Tuple{{$n}}[{{$typeParams}}]{Of{{$p}}({{$arguments}}), t{{$n}}}
}

// Interface implementation
func (*Tuple{{$n}}[{{$typeParams}}]) Size() int         { return {{$n}} }
func (t{{$n}} *Tuple{{$n}}[{{$typeParams}}]) Pre() Tuple     { return &t{{$n}}.Tuple{{$p}} }
func (t{{$n}} *Tuple{{$n}}[{{$typeParams}}]) Last() any      { return t{{$n}}.{{ index $fields (sub $n 1) }} }
func (t{{$n}} *Tuple{{$n}}[{{$typeParams}}]) Get(n int) any  { return tupleGet(t{{$n}}, n) }
func (t{{$n}} *Tuple{{$n}}[{{$typeParams}}]) String() string { return tupleString(t{{$n}}) }
func (t{{$n}} Tuple{{$n}}[{{$typeParams}}]) ToRef() *Tuple{{$n}}[{{$typeParams}}] { return &t{{$n}} }

// Returns the values in the tuple as a sequence of {{$n}} values
func (t{{$n}} *Tuple{{$n}}[{{$typeParams}}]) Return() ({{$typeParams}}) {
	return {{mapTpl (printf "t%d.{{.}}" $n) (slice $fields 0 $n) | join ", "}}
}
 
{{ end -}}